#*****************************************************************************************
# Vivado (TM) v2021.2 (64-bit)
#
# vivado_project.tcl: Tcl script for re-creating project 'vivado_project'
#
# Generated by Vivado on Fri Nov 10 14:10:51 +0300 2023
# IP Build 3369179 on Thu Oct 21 08:25:16 MDT 2021
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (vivado_project.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "audio_synth_practice/2_audio_channel/audio_channel.sv"
#    "audio_synth_practice/1_wave_generators/6_noise/audio_noise.sv"
#    "audio_synth_practice/1_wave_generators/2_saw/audio_saw.sv"
#    "audio_synth_practice/1_wave_generators/3_saw_inv/audio_saw_inv.sv"
#    "audio_synth_practice/1_wave_generators/5_sine/audio_sine.sv"
#    "audio_synth_practice/1_wave_generators/1_square/audio_square.sv"
#    "audio_synth_practice/1_wave_generators/4_triangle/audio_triangle.sv"
#    "audio_synth_practice/4_music_multichannel/audio_multichannel.sv"
#    "audio_synth_practice/6_samples/audio_sample.sv"
#    "audio_synth_practice/5_modulation/2_amplitude_modulation/mod_amplitude.sv"
#    "audio_synth_practice/5_modulation/1_frequency_modulation/mod_frequency.sv"
#    "audio_synth_practice/1_wave_generators/5_sine/sine_table_256.mem"
#    "audio_synth_practice/6_samples/sample.mem"
#    "audio_synth_practice/1_wave_generators/5_sine/tb_audio_sine.sv"
#    "audio_synth_practice/1_wave_generators/1_square/tb_audio_square.sv"
#    "audio_synth_practice/2_audio_channel/tb_audio_channel.sv"
#    "audio_synth_practice/5_modulation/2_amplitude_modulation/tb_mod_amplitude.sv"
#    "audio_synth_practice/6_samples/tb_sample.sv"
#    "audio_synth_practice/1_wave_generators/2_saw/tb_audio_saw.sv"
#    "audio_synth_practice/1_wave_generators/3_saw_inv/tb_audio_saw_inv.sv"
#    "audio_synth_practice/4_music_multichannel/tb_music_multichannel.sv"
#    "audio_synth_practice/3_music/tb_music.sv"
#    "audio_synth_practice/1_wave_generators/6_noise/tb_audio_noise.sv"
#    "audio_synth_practice/1_wave_generators/4_triangle/tb_audio_triangle.sv"
#    "audio_synth_practice/5_modulation/1_frequency_modulation/tb_mod_frequency.sv"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/2_audio_channel/audio_channel.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/6_noise/audio_noise.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/2_saw/audio_saw.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/3_saw_inv/audio_saw_inv.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/5_sine/audio_sine.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/1_square/audio_square.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/4_triangle/audio_triangle.sv"]"\
 "[file normalize "$origin_dir/4_music_multichannel/audio_multichannel.sv"]"\
 "[file normalize "$origin_dir/6_samples/audio_sample.sv"]"\
 "[file normalize "$origin_dir/5_modulation/2_amplitude_modulation/mod_amplitude.sv"]"\
 "[file normalize "$origin_dir/5_modulation/1_frequency_modulation/mod_frequency.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/5_sine/sine_table_256.mem"]"\
 "[file normalize "$origin_dir/6_samples/sample.mem"]"\
 "[file normalize "$origin_dir/1_wave_generators/5_sine/tb_audio_sine.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/1_square/tb_audio_square.sv"]"\
 "[file normalize "$origin_dir/2_audio_channel/tb_audio_channel.sv"]"\
 "[file normalize "$origin_dir/5_modulation/2_amplitude_modulation/tb_mod_amplitude.sv"]"\
 "[file normalize "$origin_dir/6_samples/tb_sample.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/2_saw/tb_audio_saw.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/3_saw_inv/tb_audio_saw_inv.sv"]"\
 "[file normalize "$origin_dir/4_music_multichannel/tb_music_multichannel.sv"]"\
 "[file normalize "$origin_dir/3_music/tb_music.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/6_noise/tb_audio_noise.sv"]"\
 "[file normalize "$origin_dir/1_wave_generators/4_triangle/tb_audio_triangle.sv"]"\
 "[file normalize "$origin_dir/5_modulation/1_frequency_modulation/tb_mod_frequency.sv"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "vivado_project"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "vivado_project.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/vivado_project"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7a100tcsg324-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "1" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/2_audio_channel/audio_channel.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/6_noise/audio_noise.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/2_saw/audio_saw.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/3_saw_inv/audio_saw_inv.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/5_sine/audio_sine.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/1_square/audio_square.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/4_triangle/audio_triangle.sv"] \
 [file normalize "${origin_dir}/4_music_multichannel/audio_multichannel.sv"] \
 [file normalize "${origin_dir}/6_samples/audio_sample.sv"] \
 [file normalize "${origin_dir}/5_modulation/2_amplitude_modulation/mod_amplitude.sv"] \
 [file normalize "${origin_dir}/5_modulation/1_frequency_modulation/mod_frequency.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/5_sine/sine_table_256.mem"] \
 [file normalize "${origin_dir}/6_samples/sample.mem"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/2_audio_channel/audio_channel.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/6_noise/audio_noise.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/2_saw/audio_saw.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/3_saw_inv/audio_saw_inv.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/5_sine/audio_sine.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/1_square/audio_square.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/4_triangle/audio_triangle.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/4_music_multichannel/audio_multichannel.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/6_samples/audio_sample.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/5_modulation/2_amplitude_modulation/mod_amplitude.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/5_modulation/1_frequency_modulation/mod_frequency.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/5_sine/sine_table_256.mem"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Memory File" -objects $file_obj

set file "$origin_dir/6_samples/sample.mem"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Memory File" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "audio_multichannel" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Empty (no sources present)

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xc7a100tcsg324-1" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/1_wave_generators/5_sine/tb_audio_sine.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/1_square/tb_audio_square.sv"] \
 [file normalize "${origin_dir}/2_audio_channel/tb_audio_channel.sv"] \
 [file normalize "${origin_dir}/5_modulation/2_amplitude_modulation/tb_mod_amplitude.sv"] \
 [file normalize "${origin_dir}/6_samples/tb_sample.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/2_saw/tb_audio_saw.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/3_saw_inv/tb_audio_saw_inv.sv"] \
 [file normalize "${origin_dir}/4_music_multichannel/tb_music_multichannel.sv"] \
 [file normalize "${origin_dir}/3_music/tb_music.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/6_noise/tb_audio_noise.sv"] \
 [file normalize "${origin_dir}/1_wave_generators/4_triangle/tb_audio_triangle.sv"] \
 [file normalize "${origin_dir}/5_modulation/1_frequency_modulation/tb_mod_frequency.sv"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
set file "$origin_dir/1_wave_generators/5_sine/tb_audio_sine.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/1_square/tb_audio_square.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/2_audio_channel/tb_audio_channel.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/5_modulation/2_amplitude_modulation/tb_mod_amplitude.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/6_samples/tb_sample.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/2_saw/tb_audio_saw.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/3_saw_inv/tb_audio_saw_inv.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/4_music_multichannel/tb_music_multichannel.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/3_music/tb_music.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/6_noise/tb_audio_noise.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/1_wave_generators/4_triangle/tb_audio_triangle.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/5_modulation/1_frequency_modulation/tb_mod_frequency.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj


# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "tb_audio_square" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj


set obj [get_runs synth_1]
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "auto_incremental_checkpoint" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

puts "INFO: Project created:${_xil_proj_name_}"
